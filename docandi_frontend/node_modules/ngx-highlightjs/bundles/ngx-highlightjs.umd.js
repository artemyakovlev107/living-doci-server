(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-highlightjs', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['ngx-highlightjs'] = {}),global.ng.core,null,global.Rx.Observable.prototype));
}(this, (function (exports,core,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ OPTIONS = new core.InjectionToken('OPTIONS');
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var HighlightJS = (function () {
        /**
         * @param {?} options
         */
        function HighlightJS(options) {
            this.options = {
                theme: 'github',
                path: 'assets/lib/hljs',
                auto: true
            };
            this._isReady$ = new rxjs.BehaviorSubject(false);
            this.options = Object.assign({}, this.options, options);
            if (typeof hljs !== 'undefined') {
                /** hljs is loaded by the user */
                hljs.configure(this.options.config);
                this._isReady$.next(true);
            }
            else {
                /** Load hljs script and style locally */
                this._loadScript();
                this._loadTheme();
            }
        }
        Object.defineProperty(HighlightJS.prototype, "isReady", {
            /**
             * @return {?}
             */
            get: function () {
                return this._isReady$.pipe(operators.filter(function (isReady) { return isReady; }), operators.take(1));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} name
         * @param {?} value
         * @param {?} ignore_illegals
         * @param {?=} continuation
         * @return {?}
         */
        HighlightJS.prototype.highlight = function (name, value, ignore_illegals, continuation) {
            if (typeof hljs !== 'undefined') {
                return hljs.highlight(name, value, ignore_illegals, continuation);
            }
        };
        /**
         * @param {?} value
         * @param {?} languageSubset
         * @return {?}
         */
        HighlightJS.prototype.highlightAuto = function (value, languageSubset) {
            if (typeof hljs !== 'undefined') {
                return hljs.highlightAuto(value, languageSubset);
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        HighlightJS.prototype.fixMarkup = function (value) {
            if (typeof hljs !== 'undefined') {
                return hljs.fixMarkup(value);
            }
        };
        /**
         * @param {?} block
         * @return {?}
         */
        HighlightJS.prototype.highlightBlock = function (block) {
            if (typeof hljs !== 'undefined') {
                hljs.highlightBlock(block);
            }
        };
        /**
         * @param {?} options
         * @return {?}
         */
        HighlightJS.prototype.configure = function (options) {
            if (typeof hljs !== 'undefined') {
                hljs.configure(this.options.config);
            }
        };
        /**
         * @return {?}
         */
        HighlightJS.prototype.initHighlighting = function () {
            if (typeof hljs !== 'undefined') {
                hljs.initHighlighting();
            }
        };
        /**
         * @return {?}
         */
        HighlightJS.prototype.initHighlightingOnLoad = function () {
            if (typeof hljs !== 'undefined') {
                hljs.initHighlightingOnLoad();
            }
        };
        /**
         * @param {?} name
         * @param {?} language
         * @return {?}
         */
        HighlightJS.prototype.registerLanguage = function (name, language) {
            if (typeof hljs !== 'undefined') {
                hljs.registerLanguage(name, language);
            }
        };
        /**
         * @return {?}
         */
        HighlightJS.prototype.listLanguages = function () {
            if (typeof hljs !== 'undefined') {
                return hljs.listLanguages();
            }
        };
        /**
         * @param {?} name
         * @return {?}
         */
        HighlightJS.prototype.getLanguage = function (name) {
            if (typeof hljs !== 'undefined') {
                return hljs.getLanguage(name);
            }
        };
        /**
         * @return {?}
         */
        HighlightJS.prototype._loadScript = function () {
            var _this = this;
            var /** @type {?} */ script = document.createElement('script');
            script.async = true;
            script.type = 'text/javascript';
            script.onload = function () {
                hljs.configure(_this.options.config);
                _this._isReady$.next(true);
            };
            script.src = this.options.path + "/highlight.pack.js";
            document.head.appendChild(script);
        };
        /**
         * @return {?}
         */
        HighlightJS.prototype._loadTheme = function () {
            var /** @type {?} */ style = document.createElement('link');
            style.rel = 'stylesheet';
            style.type = 'text/css';
            style.href = this.options.path + "/styles/" + this.options.theme + ".css";
            document.head.appendChild(style);
        };
        return HighlightJS;
    }());
    HighlightJS.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    HighlightJS.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [OPTIONS,] },] },
        ];
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * There are 2 ways to higlight a code
     *  1 - using the [code] input (default) <code highlight [code]="yourCode"></code>
     *  2 - using element text content <code> {{yourCode}} </code>
     */
    var HighlightDirective = (function () {
        /**
         * @param {?} el
         * @param {?} renderer
         * @param {?} hljs
         */
        function HighlightDirective(el, renderer, hljs) {
            this.renderer = renderer;
            this.hljs = hljs;
            this.highlighted = new core.EventEmitter();
            this.el = el.nativeElement;
        }
        Object.defineProperty(HighlightDirective.prototype, "setCode", {
            /**
             * @param {?} code
             * @return {?}
             */
            set: function (code) {
                var _this = this;
                this.code = code;
                this.hljs.isReady.subscribe(function () { return _this.highlightElement(_this.el, code); });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        HighlightDirective.prototype.ngOnInit = function () {
            var _this = this;
            /** Acitvate MutationObserver if `auto` option is true and `[code]` input is not used
                 * This will highlight using the text content */
            if (!this.code && this.hljs.options.auto) {
                this.hljs.isReady.subscribe(function () {
                    _this.highlightTextContent();
                    /** Highlight when text content changes */
                    _this.domObs = new MutationObserver(function () { return _this.highlightTextContent(); });
                    _this.domObs.observe(_this.el, { childList: true, subtree: true });
                });
            }
        };
        /**
         * Highlight using element text content
         * @return {?}
         */
        HighlightDirective.prototype.highlightTextContent = function () {
            if (!this.highlight) {
                if (this.el.tagName.toLowerCase() === 'code') {
                    this.highlightElement(this.el, this.el.innerText.trim());
                }
                else {
                    console.warn("[HighlightDirective]: Use 'highlight' on <code> element only");
                }
            }
            else if (this.highlight === 'all') {
                this.highlightChildren(this.el, 'pre code');
            }
            else {
                this.highlightChildren(this.el, this.highlight);
            }
        };
        /**
         * Highlight a code block
         * @param {?} el
         * @param {?} code
         * @return {?}
         */
        HighlightDirective.prototype.highlightElement = function (el, code) {
            var /** @type {?} */ res = this.hljs.highlightAuto(code, this.language);
            if (res.value !== el.innerHTML) {
                this.renderer.addClass(el, 'hljs');
                this.renderer.setProperty(el, 'innerHTML', res.value);
                this.highlighted.emit(res);
            }
        };
        /**
         * Highlight multiple code blocks
         * @param {?} el
         * @param {?} selector
         * @return {?}
         */
        HighlightDirective.prototype.highlightChildren = function (el, selector) {
            var _this = this;
            var /** @type {?} */ codeElements = el.querySelectorAll(selector);
            /** highlight children with the same selector */
            rxjs.from(codeElements).pipe(operators.filter(function (code) { return code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text'; }), operators.map(function (codeElement) { return _this.highlightElement(codeElement, codeElement.innerText.trim()); }), operators.take(1)).subscribe();
        };
        /**
         * @return {?}
         */
        HighlightDirective.prototype.ngOnDestroy = function () {
            /** Disconnect MutationObserver */
            if (!this.code && this.hljs.options.auto) {
                this.domObs.disconnect();
            }
        };
        return HighlightDirective;
    }());
    HighlightDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[highlight]'
                },] },
    ];
    /** @nocollapse */
    HighlightDirective.ctorParameters = function () {
        return [
            { type: core.ElementRef, },
            { type: core.Renderer2, },
            { type: HighlightJS, },
        ];
    };
    HighlightDirective.propDecorators = {
        "highlight": [{ type: core.Input },],
        "language": [{ type: core.Input },],
        "setCode": [{ type: core.Input, args: ['code',] },],
        "highlighted": [{ type: core.Output },],
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} options
     * @return {?}
     */
    function HighlightFactory(options) {
        return new HighlightJS(options);
    }
    var HighlightModule = (function () {
        function HighlightModule() {
        }
        /**
         * @param {?=} options
         * @return {?}
         */
        HighlightModule.forRoot = function (options) {
            return {
                ngModule: HighlightModule,
                providers: [
                    { provide: OPTIONS, useValue: options },
                    {
                        provide: HighlightJS,
                        useFactory: HighlightFactory,
                        deps: [OPTIONS]
                    }
                ]
            };
        };
        return HighlightModule;
    }());
    HighlightModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [HighlightDirective],
                    exports: [HighlightDirective]
                },] },
    ];

    exports.HighlightModule = HighlightModule;
    exports.HighlightJS = HighlightJS;
    exports.HighlightDirective = HighlightDirective;
    exports.ɵa = HighlightFactory;
    exports.ɵb = OPTIONS;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-highlightjs.umd.js.map
