{
  "version": 3,
  "file": "ngx-highlightjs.umd.min.js",
  "sources": [
    "ng://ngx-highlightjs/projects/ngx-highlightjs/src/lib/highlight.token.ts",
    "ng://ngx-highlightjs/projects/ngx-highlightjs/src/lib/highlight.service.ts",
    "ng://ngx-highlightjs/projects/ngx-highlightjs/src/lib/highlight.directive.ts",
    "ng://ngx-highlightjs/projects/ngx-highlightjs/src/lib/highlight.module.ts"
  ],
  "sourcesContent": [
    "import { InjectionToken } from '@angular/core';\r\nimport { HighlightOptions } from './highlight.model';\r\n\r\nexport const OPTIONS = new InjectionToken<HighlightOptions>('OPTIONS');\r\n",
    "import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { take, filter } from 'rxjs/operators';\r\nimport { HighlightOptions, HighlightResult } from './highlight.model';\r\nimport { OPTIONS } from './highlight.token';\r\n\r\ndeclare const hljs: any;\r\n\r\n@Injectable()\r\nexport class HighlightJS {\r\n  options: HighlightOptions = {\r\n    theme: 'github',\r\n    path: 'assets/lib/hljs',\r\n    auto: true\r\n  };\r\n\r\n  private _isReady$ = new BehaviorSubject(false);\r\n\r\n  // Stream that emits when highlightjs is loaded\r\n  get isReady(): Observable<boolean> {\r\n    return this._isReady$.pipe(\r\n      filter(isReady => isReady),\r\n      take(1),\r\n    );\r\n  }\r\n\r\n  constructor(@Optional() @Inject(OPTIONS) options: HighlightOptions) {\r\n    this.options = { ...this.options, ...options };\r\n\r\n    if (typeof hljs !== 'undefined') {\r\n      /** hljs is loaded by the user */\r\n      hljs.configure(this.options.config);\r\n      this._isReady$.next(true);\r\n    } else {\r\n      /** Load hljs script and style locally */\r\n      this._loadScript();\r\n      this._loadTheme();\r\n    }\r\n  }\r\n\r\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): HighlightResult {\r\n    if (typeof hljs !== 'undefined') {\r\n      return hljs.highlight(name, value, ignore_illegals, continuation);\r\n    }\r\n  }\r\n\r\n  highlightAuto(value: string, languageSubset: string[]): HighlightResult {\r\n    if (typeof hljs !== 'undefined') {\r\n      return hljs.highlightAuto(value, languageSubset);\r\n    }\r\n  }\r\n\r\n  fixMarkup(value: string): string {\r\n    if (typeof hljs !== 'undefined') {\r\n      return hljs.fixMarkup(value);\r\n    }\r\n  }\r\n\r\n  highlightBlock(block: HTMLElement) {\r\n    if (typeof hljs !== 'undefined') {\r\n      hljs.highlightBlock(block);\r\n    }\r\n  }\r\n\r\n  configure(options: HighlightOptions) {\r\n    if (typeof hljs !== 'undefined') {\r\n      hljs.configure(this.options.config);\r\n    }\r\n  }\r\n\r\n  initHighlighting() {\r\n    if (typeof hljs !== 'undefined') {\r\n      hljs.initHighlighting();\r\n    }\r\n  }\r\n\r\n  initHighlightingOnLoad() {\r\n    if (typeof hljs !== 'undefined') {\r\n      hljs.initHighlightingOnLoad();\r\n    }\r\n  }\r\n\r\n  registerLanguage(name: string, language: Function) {\r\n    if (typeof hljs !== 'undefined') {\r\n      hljs.registerLanguage(name, language);\r\n    }\r\n  }\r\n\r\n  listLanguages(): string[] {\r\n    if (typeof hljs !== 'undefined') {\r\n      return hljs.listLanguages();\r\n    }\r\n  }\r\n\r\n  getLanguage(name: string): any {\r\n    if (typeof hljs !== 'undefined') {\r\n      return hljs.getLanguage(name);\r\n    }\r\n  }\r\n\r\n  private _loadScript() {\r\n    const script = document.createElement('script');\r\n    script.async = true;\r\n    script.type = 'text/javascript';\r\n    script.onload = () => {\r\n      hljs.configure(this.options.config);\r\n      this._isReady$.next(true);\r\n    };\r\n    script.src = `${this.options.path}/highlight.pack.js`;\r\n    document.head.appendChild(script);\r\n  }\r\n\r\n  private _loadTheme() {\r\n    const style = document.createElement('link');\r\n    style.rel = 'stylesheet';\r\n    style.type = 'text/css';\r\n    style.href = `${this.options.path}/styles/${this.options.theme}.css`;\r\n    document.head.appendChild(style);\r\n  }\r\n}\r\n",
    "import { Directive, ElementRef, Renderer2, OnDestroy, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { HighlightJS } from './highlight.service';\r\nimport { HighlightResult } from './highlight.model';\r\nimport { from } from 'rxjs';\r\nimport { map, take, filter, tap} from 'rxjs/operators';\r\n\r\n/** There are 2 ways to higlight a code\r\n *  1 - using the [code] input (default) <code highlight [code]=\"yourCode\"></code>\r\n *  2 - using element text content <code> {{yourCode}} </code>\r\n */\r\n\r\n@Directive({\r\n  selector: '[highlight]'\r\n})\r\nexport class HighlightDirective implements OnInit, OnDestroy {\r\n\r\n  el: HTMLElement;\r\n  domObs: MutationObserver;\r\n  code: string;\r\n  @Input() highlight: string;\r\n  @Input() language: string[];\r\n  @Input('code')\r\n  set setCode(code: string) {\r\n    this.code = code;\r\n    this.hljs.isReady.subscribe(() => this.highlightElement(this.el, code));\r\n  }\r\n\r\n  @Output() highlighted = new EventEmitter<HighlightResult>();\r\n\r\n  constructor(el: ElementRef, private renderer: Renderer2, private hljs: HighlightJS) {\r\n    this.el = el.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    /** Acitvate MutationObserver if `auto` option is true and `[code]` input is not used\r\n     * This will highlight using the text content */\r\n    if (!this.code && this.hljs.options.auto) {\r\n\r\n      this.hljs.isReady.subscribe(() => {\r\n        this.highlightTextContent();\r\n\r\n        /** Highlight when text content changes */\r\n        this.domObs = new MutationObserver(() => this.highlightTextContent());\r\n        this.domObs.observe(this.el, { childList: true, subtree: true });\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Highlight using element text content */\r\n  highlightTextContent() {\r\n    if (!this.highlight) {\r\n      if (this.el.tagName.toLowerCase() === 'code') {\r\n        this.highlightElement(this.el, this.el.innerText.trim());\r\n      } else {\r\n        console.warn(`[HighlightDirective]: Use 'highlight' on <code> element only`);\r\n      }\r\n    } else if (this.highlight === 'all') {\r\n      this.highlightChildren(this.el, 'pre code');\r\n    } else {\r\n      this.highlightChildren(this.el, this.highlight);\r\n    }\r\n  }\r\n\r\n  /** Highlight a code block */\r\n  highlightElement(el: HTMLElement, code: string) {\r\n\r\n    const res: HighlightResult = this.hljs.highlightAuto(code, this.language);\r\n    if (res.value !== el.innerHTML) {\r\n      this.renderer.addClass(el, 'hljs');\r\n      this.renderer.setProperty(el, 'innerHTML', res.value);\r\n      this.highlighted.emit(res);\r\n    }\r\n  }\r\n\r\n  /** Highlight multiple code blocks */\r\n  highlightChildren(el: HTMLElement, selector: string) {\r\n\r\n    const codeElements = el.querySelectorAll(selector);\r\n\r\n    /** highlight children with the same selector */\r\n    from(codeElements).pipe(\r\n      filter((code: HTMLElement) => code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text'),\r\n      map((codeElement: HTMLElement) => this.highlightElement(codeElement, codeElement.innerText.trim())),\r\n      take(1)\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    /** Disconnect MutationObserver */\r\n    if (!this.code && this.hljs.options.auto) {\r\n      this.domObs.disconnect();\r\n    }\r\n  }\r\n}\r\n",
    "import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { HighlightJS } from './highlight.service';\r\nimport { HighlightDirective } from './highlight.directive';\r\nimport { HighlightOptions } from './highlight.model';\r\nimport { OPTIONS } from './highlight.token';\r\n\r\nexport function HighlightFactory(options: HighlightOptions) {\r\n  return new HighlightJS(options);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [HighlightDirective],\r\n  exports: [HighlightDirective]\r\n})\r\nexport class HighlightModule {\r\n  static forRoot(options?: HighlightOptions): ModuleWithProviders {\r\n    return {\r\n      ngModule: HighlightModule,\r\n      providers: [\r\n        {provide: OPTIONS, useValue: options},\r\n        {\r\n          provide: HighlightJS,\r\n          useFactory: HighlightFactory,\r\n          deps: [OPTIONS]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "OPTIONS",
    "InjectionToken",
    "HighlightJS",
    "options",
    "this",
    "theme",
    "path",
    "auto",
    "_isReady$",
    "BehaviorSubject",
    "Object",
    "assign",
    "hljs",
    "configure",
    "config",
    "next",
    "_loadScript",
    "_loadTheme",
    "get",
    "pipe",
    "filter",
    "isReady",
    "take",
    "prototype",
    "highlight",
    "name",
    "value",
    "ignore_illegals",
    "continuation",
    "highlightAuto",
    "languageSubset",
    "fixMarkup",
    "highlightBlock",
    "block",
    "initHighlighting",
    "initHighlightingOnLoad",
    "registerLanguage",
    "language",
    "listLanguages",
    "getLanguage",
    "_this",
    "script",
    "document",
    "createElement",
    "async",
    "type",
    "onload",
    "head",
    "appendChild",
    "style",
    "href",
    "HighlightDirective",
    "el",
    "renderer",
    "highlighted",
    "EventEmitter",
    "nativeElement",
    "set",
    "code",
    "configurable",
    "ngOnInit",
    "subscribe",
    "highlightTextContent",
    "tagName",
    "toLowerCase",
    "highlightElement",
    "innerText",
    "trim",
    "console",
    "warn",
    "res",
    "codeElements",
    "querySelectorAll",
    "selector",
    "from",
    "childNodes",
    "length",
    "nodeName",
    "map",
    "codeElement",
    "domObs",
    "disconnect",
    "HighlightFactory",
    "decorators",
    "ctorParameters",
    "HighlightModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "useValue",
    "useFactory",
    "deps"
  ],
  "mappings": "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"
}
