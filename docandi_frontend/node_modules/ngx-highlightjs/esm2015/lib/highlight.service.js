/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { take, filter } from 'rxjs/operators';
import { OPTIONS } from './highlight.token';
export class HighlightJS {
    /**
     * @param {?} options
     */
    constructor(options) {
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true
        };
        this._isReady$ = new BehaviorSubject(false);
        this.options = Object.assign({}, this.options, options);
        if (typeof hljs !== 'undefined') {
            /** hljs is loaded by the user */
            hljs.configure(this.options.config);
            this._isReady$.next(true);
        }
        else {
            /** Load hljs script and style locally */
            this._loadScript();
            this._loadTheme();
        }
    }
    /**
     * @return {?}
     */
    get isReady() {
        return this._isReady$.pipe(filter(isReady => isReady), take(1));
    }
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    highlight(name, value, ignore_illegals, continuation) {
        if (typeof hljs !== 'undefined') {
            return hljs.highlight(name, value, ignore_illegals, continuation);
        }
    }
    /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    highlightAuto(value, languageSubset) {
        if (typeof hljs !== 'undefined') {
            return hljs.highlightAuto(value, languageSubset);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    fixMarkup(value) {
        if (typeof hljs !== 'undefined') {
            return hljs.fixMarkup(value);
        }
    }
    /**
     * @param {?} block
     * @return {?}
     */
    highlightBlock(block) {
        if (typeof hljs !== 'undefined') {
            hljs.highlightBlock(block);
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    configure(options) {
        if (typeof hljs !== 'undefined') {
            hljs.configure(this.options.config);
        }
    }
    /**
     * @return {?}
     */
    initHighlighting() {
        if (typeof hljs !== 'undefined') {
            hljs.initHighlighting();
        }
    }
    /**
     * @return {?}
     */
    initHighlightingOnLoad() {
        if (typeof hljs !== 'undefined') {
            hljs.initHighlightingOnLoad();
        }
    }
    /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    registerLanguage(name, language) {
        if (typeof hljs !== 'undefined') {
            hljs.registerLanguage(name, language);
        }
    }
    /**
     * @return {?}
     */
    listLanguages() {
        if (typeof hljs !== 'undefined') {
            return hljs.listLanguages();
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getLanguage(name) {
        if (typeof hljs !== 'undefined') {
            return hljs.getLanguage(name);
        }
    }
    /**
     * @return {?}
     */
    _loadScript() {
        const /** @type {?} */ script = document.createElement('script');
        script.async = true;
        script.type = 'text/javascript';
        script.onload = () => {
            hljs.configure(this.options.config);
            this._isReady$.next(true);
        };
        script.src = `${this.options.path}/highlight.pack.js`;
        document.head.appendChild(script);
    }
    /**
     * @return {?}
     */
    _loadTheme() {
        const /** @type {?} */ style = document.createElement('link');
        style.rel = 'stylesheet';
        style.type = 'text/css';
        style.href = `${this.options.path}/styles/${this.options.theme}.css`;
        document.head.appendChild(style);
    }
}
HighlightJS.decorators = [
    { type: Injectable },
];
/** @nocollapse */
HighlightJS.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OPTIONS,] },] },
];
function HighlightJS_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    HighlightJS.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    HighlightJS.ctorParameters;
    /** @type {?} */
    HighlightJS.prototype.options;
    /** @type {?} */
    HighlightJS.prototype._isReady$;
}
//# sourceMappingURL=highlight.service.js.map
