/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { take, filter } from 'rxjs/operators';
import { OPTIONS } from './highlight.token';
var HighlightJS = /** @class */ (function () {
    /**
     * @param {?} options
     */
    function HighlightJS(options) {
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true
        };
        this._isReady$ = new BehaviorSubject(false);
        this.options = Object.assign({}, this.options, options);
        if (typeof hljs !== 'undefined') {
            /** hljs is loaded by the user */
            hljs.configure(this.options.config);
            this._isReady$.next(true);
        }
        else {
            /** Load hljs script and style locally */
            this._loadScript();
            this._loadTheme();
        }
    }
    Object.defineProperty(HighlightJS.prototype, "isReady", {
        /**
         * @return {?}
         */
        get: function () {
            return this._isReady$.pipe(filter(function (isReady) { return isReady; }), take(1));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    HighlightJS.prototype.highlight = function (name, value, ignore_illegals, continuation) {
        if (typeof hljs !== 'undefined') {
            return hljs.highlight(name, value, ignore_illegals, continuation);
        }
    };
    /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    HighlightJS.prototype.highlightAuto = function (value, languageSubset) {
        if (typeof hljs !== 'undefined') {
            return hljs.highlightAuto(value, languageSubset);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    HighlightJS.prototype.fixMarkup = function (value) {
        if (typeof hljs !== 'undefined') {
            return hljs.fixMarkup(value);
        }
    };
    /**
     * @param {?} block
     * @return {?}
     */
    HighlightJS.prototype.highlightBlock = function (block) {
        if (typeof hljs !== 'undefined') {
            hljs.highlightBlock(block);
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    HighlightJS.prototype.configure = function (options) {
        if (typeof hljs !== 'undefined') {
            hljs.configure(this.options.config);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.initHighlighting = function () {
        if (typeof hljs !== 'undefined') {
            hljs.initHighlighting();
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.initHighlightingOnLoad = function () {
        if (typeof hljs !== 'undefined') {
            hljs.initHighlightingOnLoad();
        }
    };
    /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    HighlightJS.prototype.registerLanguage = function (name, language) {
        if (typeof hljs !== 'undefined') {
            hljs.registerLanguage(name, language);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.listLanguages = function () {
        if (typeof hljs !== 'undefined') {
            return hljs.listLanguages();
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    HighlightJS.prototype.getLanguage = function (name) {
        if (typeof hljs !== 'undefined') {
            return hljs.getLanguage(name);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype._loadScript = function () {
        var _this = this;
        var /** @type {?} */ script = document.createElement('script');
        script.async = true;
        script.type = 'text/javascript';
        script.onload = function () {
            hljs.configure(_this.options.config);
            _this._isReady$.next(true);
        };
        script.src = this.options.path + "/highlight.pack.js";
        document.head.appendChild(script);
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype._loadTheme = function () {
        var /** @type {?} */ style = document.createElement('link');
        style.rel = 'stylesheet';
        style.type = 'text/css';
        style.href = this.options.path + "/styles/" + this.options.theme + ".css";
        document.head.appendChild(style);
    };
    return HighlightJS;
}());
export { HighlightJS };
HighlightJS.decorators = [
    { type: Injectable },
];
/** @nocollapse */
HighlightJS.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OPTIONS,] },] },
]; };
function HighlightJS_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    HighlightJS.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    HighlightJS.ctorParameters;
    /** @type {?} */
    HighlightJS.prototype.options;
    /** @type {?} */
    HighlightJS.prototype._isReady$;
}
//# sourceMappingURL=highlight.service.js.map
