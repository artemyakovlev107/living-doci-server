import { InjectionToken, Injectable, Inject, Optional, Directive, ElementRef, Renderer2, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { BehaviorSubject, from } from 'rxjs';
import { take, filter, map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ OPTIONS = new InjectionToken('OPTIONS');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class HighlightJS {
    /**
     * @param {?} options
     */
    constructor(options) {
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true
        };
        this._isReady$ = new BehaviorSubject(false);
        this.options = Object.assign({}, this.options, options);
        if (typeof hljs !== 'undefined') {
            /** hljs is loaded by the user */
            hljs.configure(this.options.config);
            this._isReady$.next(true);
        }
        else {
            /** Load hljs script and style locally */
            this._loadScript();
            this._loadTheme();
        }
    }
    /**
     * @return {?}
     */
    get isReady() {
        return this._isReady$.pipe(filter(isReady => isReady), take(1));
    }
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    highlight(name, value, ignore_illegals, continuation) {
        if (typeof hljs !== 'undefined') {
            return hljs.highlight(name, value, ignore_illegals, continuation);
        }
    }
    /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    highlightAuto(value, languageSubset) {
        if (typeof hljs !== 'undefined') {
            return hljs.highlightAuto(value, languageSubset);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    fixMarkup(value) {
        if (typeof hljs !== 'undefined') {
            return hljs.fixMarkup(value);
        }
    }
    /**
     * @param {?} block
     * @return {?}
     */
    highlightBlock(block) {
        if (typeof hljs !== 'undefined') {
            hljs.highlightBlock(block);
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    configure(options) {
        if (typeof hljs !== 'undefined') {
            hljs.configure(this.options.config);
        }
    }
    /**
     * @return {?}
     */
    initHighlighting() {
        if (typeof hljs !== 'undefined') {
            hljs.initHighlighting();
        }
    }
    /**
     * @return {?}
     */
    initHighlightingOnLoad() {
        if (typeof hljs !== 'undefined') {
            hljs.initHighlightingOnLoad();
        }
    }
    /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    registerLanguage(name, language) {
        if (typeof hljs !== 'undefined') {
            hljs.registerLanguage(name, language);
        }
    }
    /**
     * @return {?}
     */
    listLanguages() {
        if (typeof hljs !== 'undefined') {
            return hljs.listLanguages();
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getLanguage(name) {
        if (typeof hljs !== 'undefined') {
            return hljs.getLanguage(name);
        }
    }
    /**
     * @return {?}
     */
    _loadScript() {
        const /** @type {?} */ script = document.createElement('script');
        script.async = true;
        script.type = 'text/javascript';
        script.onload = () => {
            hljs.configure(this.options.config);
            this._isReady$.next(true);
        };
        script.src = `${this.options.path}/highlight.pack.js`;
        document.head.appendChild(script);
    }
    /**
     * @return {?}
     */
    _loadTheme() {
        const /** @type {?} */ style = document.createElement('link');
        style.rel = 'stylesheet';
        style.type = 'text/css';
        style.href = `${this.options.path}/styles/${this.options.theme}.css`;
        document.head.appendChild(style);
    }
}
HighlightJS.decorators = [
    { type: Injectable },
];
/** @nocollapse */
HighlightJS.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OPTIONS,] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * There are 2 ways to higlight a code
 *  1 - using the [code] input (default) <code highlight [code]="yourCode"></code>
 *  2 - using element text content <code> {{yourCode}} </code>
 */
class HighlightDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} hljs
     */
    constructor(el, renderer, hljs) {
        this.renderer = renderer;
        this.hljs = hljs;
        this.highlighted = new EventEmitter();
        this.el = el.nativeElement;
    }
    /**
     * @param {?} code
     * @return {?}
     */
    set setCode(code) {
        this.code = code;
        this.hljs.isReady.subscribe(() => this.highlightElement(this.el, code));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** Acitvate MutationObserver if `auto` option is true and `[code]` input is not used
             * This will highlight using the text content */
        if (!this.code && this.hljs.options.auto) {
            this.hljs.isReady.subscribe(() => {
                this.highlightTextContent();
                /** Highlight when text content changes */
                this.domObs = new MutationObserver(() => this.highlightTextContent());
                this.domObs.observe(this.el, { childList: true, subtree: true });
            });
        }
    }
    /**
     * Highlight using element text content
     * @return {?}
     */
    highlightTextContent() {
        if (!this.highlight) {
            if (this.el.tagName.toLowerCase() === 'code') {
                this.highlightElement(this.el, this.el.innerText.trim());
            }
            else {
                console.warn(`[HighlightDirective]: Use 'highlight' on <code> element only`);
            }
        }
        else if (this.highlight === 'all') {
            this.highlightChildren(this.el, 'pre code');
        }
        else {
            this.highlightChildren(this.el, this.highlight);
        }
    }
    /**
     * Highlight a code block
     * @param {?} el
     * @param {?} code
     * @return {?}
     */
    highlightElement(el, code) {
        const /** @type {?} */ res = this.hljs.highlightAuto(code, this.language);
        if (res.value !== el.innerHTML) {
            this.renderer.addClass(el, 'hljs');
            this.renderer.setProperty(el, 'innerHTML', res.value);
            this.highlighted.emit(res);
        }
    }
    /**
     * Highlight multiple code blocks
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    highlightChildren(el, selector) {
        const /** @type {?} */ codeElements = el.querySelectorAll(selector);
        /** highlight children with the same selector */
        from(codeElements).pipe(filter((code) => code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text'), map((codeElement) => this.highlightElement(codeElement, codeElement.innerText.trim())), take(1)).subscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /** Disconnect MutationObserver */
        if (!this.code && this.hljs.options.auto) {
            this.domObs.disconnect();
        }
    }
}
HighlightDirective.decorators = [
    { type: Directive, args: [{
                selector: '[highlight]'
            },] },
];
/** @nocollapse */
HighlightDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: HighlightJS, },
];
HighlightDirective.propDecorators = {
    "highlight": [{ type: Input },],
    "language": [{ type: Input },],
    "setCode": [{ type: Input, args: ['code',] },],
    "highlighted": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} options
 * @return {?}
 */
function HighlightFactory(options) {
    return new HighlightJS(options);
}
class HighlightModule {
    /**
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: HighlightModule,
            providers: [
                { provide: OPTIONS, useValue: options },
                {
                    provide: HighlightJS,
                    useFactory: HighlightFactory,
                    deps: [OPTIONS]
                }
            ]
        };
    }
}
HighlightModule.decorators = [
    { type: NgModule, args: [{
                declarations: [HighlightDirective],
                exports: [HighlightDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { HighlightModule, HighlightJS, HighlightDirective, HighlightFactory as ɵa, OPTIONS as ɵb };
//# sourceMappingURL=ngx-highlightjs.js.map
